let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <C-Space> 
imap <Nul> <C-Space>
inoremap <silent> <Plug>IMAP_JumpBack =IMAP_Jumpfunc('b', 0)
inoremap <silent> <Plug>IMAP_JumpForward =IMAP_Jumpfunc('', 0)
inoremap <silent> <C-Tab> =UltiSnips#ListSnippets()
cnoremap <End> <Nop>
cnoremap <Home> <Nop>
cnoremap <PageDown> <Nop>
cnoremap <PageUp> <Nop>
cnoremap <Del> <Nop>
cnoremap <Insert> <Nop>
cnoremap <S-Right> <Nop>
cnoremap <S-Left> <Nop>
cnoremap <S-Down> <Nop>
cnoremap <S-Up> <Nop>
cnoremap <M-Right> <Nop>
cnoremap <M-Left> <Nop>
cnoremap <M-Down> <Nop>
cnoremap <M-Up> <Nop>
cnoremap <C-Right> <Nop>
cnoremap <C-Left> <Nop>
cnoremap <C-Down> <Nop>
cnoremap <C-Up> <Nop>
cnoremap <Right> <Nop>
cnoremap <Left> <Nop>
cnoremap <Down> <Nop>
cnoremap <Up> <Nop>
inoremap <End> <Nop>
inoremap <Home> <Nop>
inoremap <PageDown> <Nop>
inoremap <PageUp> <Nop>
inoremap <Del> <Nop>
inoremap <Insert> <Nop>
inoremap <S-Right> <Nop>
inoremap <S-Left> <Nop>
inoremap <S-Down> <Nop>
inoremap <S-Up> <Nop>
inoremap <M-Right> <Nop>
inoremap <M-Left> <Nop>
inoremap <M-Down> <Nop>
inoremap <M-Up> <Nop>
inoremap <C-Right> <Nop>
inoremap <C-Left> <Nop>
inoremap <C-Down> <Nop>
inoremap <C-Up> <Nop>
inoremap <Right> <Nop>
inoremap <Left> <Nop>
inoremap <Down> <Nop>
inoremap <Up> <Nop>
map! <D-v> *
xmap  <Plug>SpeedDatingUp
nmap  <Plug>SpeedDatingUp
nmap  <Plug>IMAP_JumpForward
snoremap <silent>  c
xnoremap <silent> 	 :call UltiSnips#SaveLastVisualSelection()gvs
snoremap <silent> 	 :call UltiSnips#ExpandSnippetOrJump()
vmap <NL> <Plug>IMAP_JumpForward
nnoremap  :noh:redraw!
nnoremap <silent>  :CtrlPMRU
snoremap  "_c
nnoremap  :write
nnoremap  :ball
nnoremap  :bprevious
nnoremap  :bnext
nnoremap  :bdelete
nnoremap , :vertical resize -10
nnoremap . :vertical resize +10
nnoremap - :resize -10
nnoremap = :resize +10
nnoremap 0 =
xmap  <Plug>SpeedDatingDown
nmap  <Plug>SpeedDatingDown
nnoremap    gw}
xnoremap # :call VisualStarSearchSet('?')?=@/
xnoremap & :&&
nnoremap & :&&
xnoremap * :call VisualStarSearchSet('/')/=@/
xmap S <Plug>VSurround
nmap [c <Plug>GitGutterPrevHunk
vmap [% [%m'gv``
nnoremap \d :YcmShowDetailedDiagnostic
nmap \hp <Plug>GitGutterPreviewHunk
nmap \hr <Plug>GitGutterUndoHunk:echomsg '\hr is deprecated. Use \hu'
nmap \hu <Plug>GitGutterUndoHunk
nmap \hs <Plug>GitGutterStageHunk
vnoremap \* :call VisualStarSearchSet('/'):execute 'noautocmd vimgrep /' . @/ . '/ **'
nnoremap \* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'
nmap <silent> \ig <Plug>IndentGuidesToggle
nnoremap \tc :sil vimgrep /TODO \d\d\d\d.\d\d.\d\d /j ~/Dropbox/VimWiki/*.wiki:cw
nnoremap \ta :sil vimgrep /TODO /j ~/Dropbox/VimWiki/*.wiki:cw
nnoremap \do :e ~/Dropbox/Wiki/todo.txtzR
nnoremap \no :e ~/Dropbox/Wiki/notes.wikizR
nnoremap \te :e ~/Dropbox/Wiki/temp.wikizR
nnoremap \ww :e ~/Dropbox/Wiki/index.wikizR
nnoremap \cl :source %:r.session
nnoremap \cs :mksession %:r.session
nnoremap \log :e %:r.log 
nnoremap \lcd :lcd %:p:h
nnoremap \cd :cd %:p:h
nnoremap \bin :%!xxd -r
nnoremap \hex :%!xxd
nnoremap \time a=strftime("%H:%M")
nnoremap \date a=strftime("%Y-%m-%d")
nmap \tr :NERDTreeToggle %
nmap \tt :TagbarToggle
nmap \cp :CtrlP ~/Dropbox/Devel
nmap \ca :CtrlP ~/Dropbox/Documents/Arbeit
nmap \cb :CtrlPBuffer
nmap \cm :CtrlPMRU
nmap \cc :CtrlP ~
nnoremap \light :call g:LightColorScheme()
nnoremap \dark :call g:DarkColorScheme()
nnoremap \p :r !pbpaste
vnoremap \y y:call system("pbcopy", getreg("\""))
nmap ]c <Plug>GitGutterNextHunk
vmap ]% ]%m'gv``
xmap ac <Plug>GitGutterTextObjectOuterVisual
omap ac <Plug>GitGutterTextObjectOuterPending
vmap a% [%v]%
nmap cS <Plug>CSurround
nmap cs <Plug>Csurround
nmap cgc <Plug>ChangeCommentary
nmap ds <Plug>Dsurround
nmap d <Plug>SpeedDatingNowLocal
nmap d <Plug>SpeedDatingNowUTC
vmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
nmap gcu <Plug>Commentary<Plug>Commentary
nmap gcc <Plug>CommentaryLine
omap gc <Plug>Commentary
nmap gc <Plug>Commentary
xmap gc <Plug>Commentary
xmap ic <Plug>GitGutterTextObjectInnerVisual
omap ic <Plug>GitGutterTextObjectInnerPending
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
nnoremap <silent> <Plug>GitGutterPreviewHunk :GitGutterPreviewHunk
nnoremap <silent> <Plug>GitGutterUndoHunk :GitGutterUndoHunk
nnoremap <silent> <Plug>GitGutterStageHunk :GitGutterStageHunk
nnoremap <silent> <expr> <Plug>GitGutterPrevHunk &diff ? '[c' : ":\execute v:count1 . 'GitGutterPrevHunk'\"
nnoremap <silent> <expr> <Plug>GitGutterNextHunk &diff ? ']c' : ":\execute v:count1 . 'GitGutterNextHunk'\"
xnoremap <silent> <Plug>GitGutterTextObjectOuterVisual :call gitgutter#hunk#text_object(0)
xnoremap <silent> <Plug>GitGutterTextObjectInnerVisual :call gitgutter#hunk#text_object(1)
onoremap <silent> <Plug>GitGutterTextObjectOuterPending :call gitgutter#hunk#text_object(0)
onoremap <silent> <Plug>GitGutterTextObjectInnerPending :call gitgutter#hunk#text_object(1)
nnoremap <SNR>85_: :=v:count ? v:count : ''
nnoremap <silent> <Plug>SurroundRepeat .
nnoremap <silent> <Plug>SpeedDatingNowUTC :call speeddating#timestamp(1,v:count)
nnoremap <silent> <Plug>SpeedDatingNowLocal :call speeddating#timestamp(0,v:count)
vnoremap <silent> <Plug>SpeedDatingDown :call speeddating#incrementvisual(-v:count1)
vnoremap <silent> <Plug>SpeedDatingUp :call speeddating#incrementvisual(v:count1)
nnoremap <silent> <Plug>SpeedDatingDown :call speeddating#increment(-v:count1)
nnoremap <silent> <Plug>SpeedDatingUp :call speeddating#increment(v:count1)
vnoremap <silent> <Plug>IMAP_JumpBack `<i=IMAP_Jumpfunc('b', 0)
vnoremap <silent> <Plug>IMAP_JumpForward i=IMAP_Jumpfunc('', 0)
vnoremap <silent> <Plug>IMAP_DeleteAndJumpBack "_<Del>i=IMAP_Jumpfunc('b', 0)
vnoremap <silent> <Plug>IMAP_DeleteAndJumpForward "_<Del>i=IMAP_Jumpfunc('', 0)
nnoremap <silent> <Plug>IMAP_JumpBack i=IMAP_Jumpfunc('b', 0)
nnoremap <silent> <Plug>IMAP_JumpForward i=IMAP_Jumpfunc('', 0)
nmap <silent> <Plug>CommentaryUndo <Plug>Commentary<Plug>Commentary
snoremap <silent> <Del> c
snoremap <silent> <BS> c
snoremap <silent> <C-Tab> :call UltiSnips#ListSnippets()
vnoremap <End> <Nop>
vnoremap <Home> <Nop>
vnoremap <PageDown> <Nop>
vnoremap <PageUp> <Nop>
xnoremap <Del> <Nop>
vnoremap <Insert> <Nop>
vnoremap <S-Right> <Nop>
vnoremap <S-Left> <Nop>
vnoremap <S-Down> <Nop>
vnoremap <S-Up> <Nop>
vnoremap <M-Right> <Nop>
vnoremap <M-Left> <Nop>
vnoremap <M-Down> <Nop>
vnoremap <M-Up> <Nop>
vnoremap <C-Right> <Nop>
vnoremap <C-Left> <Nop>
vnoremap <C-Down> <Nop>
vnoremap <C-Up> <Nop>
vnoremap <Right> <Nop>
vnoremap <Left> <Nop>
vnoremap <Down> <Nop>
vnoremap <Up> <Nop>
nnoremap <End> <Nop>
nnoremap <Home> <Nop>
nnoremap <PageDown> <Nop>
nnoremap <PageUp> <Nop>
nnoremap <Del> <Nop>
nnoremap <Insert> <Nop>
nnoremap <S-Right> <Nop>
nnoremap <S-Left> <Nop>
nnoremap <S-Down> <Nop>
nnoremap <S-Up> <Nop>
nnoremap <M-Right> <Nop>
nnoremap <M-Left> <Nop>
nnoremap <M-Down> <Nop>
nnoremap <M-Up> <Nop>
nnoremap <C-Right> <Nop>
nnoremap <C-Left> <Nop>
nnoremap <C-Down> <Nop>
nnoremap <C-Up> <Nop>
nnoremap <Right> <Nop>
nnoremap <Left> <Nop>
nnoremap <Down> <Nop>
nnoremap <Up> <Nop>
xmap <BS> "-d
vmap <D-x> "*d
vmap <D-c> "*y
vmap <D-v> "-d"*P
nmap <D-v> "*P
cnoremap  <Home>
inoremap  <Home>
cnoremap  <S-Left>
inoremap  <S-Left>
cnoremap  
inoremap  ciw
cnoremap  <End>
inoremap  <End>
imap S <Plug>ISurround
imap s <Plug>Isurround
imap  <Plug>IMAP_JumpForward
cnoremap  <Left>
inoremap  <Left>
inoremap <silent> 	 =UltiSnips#ExpandSnippetOrJump()
cnoremap <NL> <Down>
inoremap <NL> <Down>
cnoremap  <Up>
inoremap  <Up>
cnoremap  <Right>
inoremap  <Right>
inoremap  :write
cnoremap  <S-Right>
inoremap  <S-Right>
inoremap jk 
let &cpo=s:cpo_save
unlet s:cpo_save
set backspace=indent,eol,start
set clipboard=unnamed
set completefunc=youcompleteme#Complete
set completeopt=preview,menuone
set cpoptions=aAceFsB
set expandtab
set exrc
set fileencodings=ucs-bom,utf-8,default,latin1
set grepprg=grep\ -nH\ $*
set helplang=en
set hidden
set history=200
set hlsearch
set ignorecase
set incsearch
set iskeyword=@,48-57,_,192-255,-,#,.
set laststatus=2
set lazyredraw
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set omnifunc=youcompleteme#OmniComplete
set runtimepath=~/.vim,~/.vim/bundle/Vundle.vim,~/.vim/bundle/ctrlp.vim,~/.vim/bundle/LanguageTool,~/.vim/bundle/nerdtree,~/.vim/bundle/syntastic,~/.vim/bundle/SyntaxRange,~/.vim/bundle/tabular,~/.vim/bundle/tagbar,~/.vim/bundle/ultisnips,~/.vim/bundle/vim-coloresque,~/.vim/bundle/vim-colorschemes,~/.vim/bundle/vim-commentary,~/.vim/bundle/vim-easytags,~/.vim/bundle/vim-indent-guides,~/.vim/bundle/vim-latex-suite,~/.vim/bundle/vim-markdown,~/.vim/bundle/vim-markdown-folding,~/.vim/bundle/matchit,~/.vim/bundle/vim-misc,~/.vim/bundle/vim-pandoc,~/.vim/bundle/vim-pandoc-syntax,~/.vim/bundle/vim-powerline,~/.vim/bundle/vim-qargs,~/.vim/bundle/vim-repeat,~/.vim/bundle/vim-speeddating,~/.vim/bundle/vim-surround,~/.vim/bundle/vim-visual-star-search,~/.vim/bundle/YouCompleteMe,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-gitgutter,~/.vim/bundle/indentpython.vim,~/.vim/bundle/vim-flake8,~/.vim/bundle/my-vim-todo-txt,/usr/local/share/vim/vimfiles,/usr/local/share/vim/vim80,/usr/local/share/vim/vimfiles/after,~/.vim/after,~/.vim/bundl
set secure
set shiftwidth=4
set shortmess=filnxtToOc
set smartcase
set softtabstop=4
set spelllang=en_us,de_20
set splitbelow
set splitright
set tabstop=4
set tags=./tags,tags,~/.vimtags
set textwidth=79
set updatetime=2000
set wildignore=*.pyc
set wildmenu
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Dropbox/Documents/Arbeit/Lehre/WS1617/MAML/src/First\ steps
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +42 multiclass.py
badd +1 .
argglobal
silent! argdel *
argadd multiclass.py
set splitbelow splitright
wincmd t
set winheight=1 winwidth=1
argglobal
enew
file NERD_tree_1
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> <silent> <NL> :call nerdtree#ui_glue#invokeKeyMap("<C-j>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap("<C-k>")
nnoremap <buffer> <silent>  :call nerdtree#ui_glue#invokeKeyMap(g:NERDTreeMapActivateNode)
nnoremap <buffer> <silent> ? :call nerdtree#ui_glue#invokeKeyMap("?")
nnoremap <buffer> <silent> A :call nerdtree#ui_glue#invokeKeyMap("A")
nnoremap <buffer> <silent> B :call nerdtree#ui_glue#invokeKeyMap("B")
nnoremap <buffer> <silent> CD :call nerdtree#ui_glue#invokeKeyMap("CD")
nnoremap <buffer> <silent> C :call nerdtree#ui_glue#invokeKeyMap("C")
nnoremap <buffer> <silent> D :call nerdtree#ui_glue#invokeKeyMap("D")
nnoremap <buffer> <silent> F :call nerdtree#ui_glue#invokeKeyMap("F")
nnoremap <buffer> <silent> I :call nerdtree#ui_glue#invokeKeyMap("I")
nnoremap <buffer> <silent> J :call nerdtree#ui_glue#invokeKeyMap("J")
nnoremap <buffer> <silent> K :call nerdtree#ui_glue#invokeKeyMap("K")
nnoremap <buffer> <silent> O :call nerdtree#ui_glue#invokeKeyMap("O")
nnoremap <buffer> <silent> P :call nerdtree#ui_glue#invokeKeyMap("P")
nnoremap <buffer> <silent> R :call nerdtree#ui_glue#invokeKeyMap("R")
nnoremap <buffer> <silent> T :call nerdtree#ui_glue#invokeKeyMap("T")
nnoremap <buffer> <silent> U :call nerdtree#ui_glue#invokeKeyMap("U")
nnoremap <buffer> <silent> X :call nerdtree#ui_glue#invokeKeyMap("X")
nnoremap <buffer> <silent> cd :call nerdtree#ui_glue#invokeKeyMap("cd")
nnoremap <buffer> <silent> e :call nerdtree#ui_glue#invokeKeyMap("e")
nnoremap <buffer> <silent> f :call nerdtree#ui_glue#invokeKeyMap("f")
nnoremap <buffer> <silent> gi :call nerdtree#ui_glue#invokeKeyMap("gi")
nnoremap <buffer> <silent> gs :call nerdtree#ui_glue#invokeKeyMap("gs")
nnoremap <buffer> <silent> go :call nerdtree#ui_glue#invokeKeyMap("go")
nnoremap <buffer> <silent> i :call nerdtree#ui_glue#invokeKeyMap("i")
nnoremap <buffer> <silent> m :call nerdtree#ui_glue#invokeKeyMap("m")
nnoremap <buffer> <silent> o :call nerdtree#ui_glue#invokeKeyMap("o")
nnoremap <buffer> <silent> p :call nerdtree#ui_glue#invokeKeyMap("p")
nnoremap <buffer> <silent> q :call nerdtree#ui_glue#invokeKeyMap("q")
nnoremap <buffer> <silent> r :call nerdtree#ui_glue#invokeKeyMap("r")
nnoremap <buffer> <silent> s :call nerdtree#ui_glue#invokeKeyMap("s")
nnoremap <buffer> <silent> t :call nerdtree#ui_glue#invokeKeyMap("t")
nnoremap <buffer> <silent> u :call nerdtree#ui_glue#invokeKeyMap("u")
nnoremap <buffer> <silent> x :call nerdtree#ui_glue#invokeKeyMap("x")
nnoremap <buffer> <silent> <2-LeftMouse> :call nerdtree#ui_glue#invokeKeyMap("<2-LeftMouse>")
nnoremap <buffer> <silent> <LeftRelease> <LeftRelease>:call nerdtree#ui_glue#invokeKeyMap("<LeftRelease>")
nnoremap <buffer> <silent> <MiddleRelease> :call nerdtree#ui_glue#invokeKeyMap("<MiddleRelease>")
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal backupcopy=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=hide
setlocal nobuflisted
setlocal buftype=nofile
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'nerdtree'
setlocal filetype=nerdtree
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-,#,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=bin,octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=youcompleteme#OmniComplete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal signcolumn=auto
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en_us,de_20
setlocal statusline=%!Pl#Statusline(11,1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'nerdtree'
setlocal syntax=nerdtree
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal textwidth=79
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOc
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
